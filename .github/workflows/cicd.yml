name: cicd

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

env:
  # docker.io as default registry (docker hub)
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: alpine-latest
    steps:
      # Initialization

      # Checkout
      - uses: actions/checkout@v4
      # Using node
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.11

      # Build app

      # Install deps
      - name: Install dependencies
        run: npm ci
      # Lint
      - name: Start linting
        run: npm run lint
      # Building app
      - name: Build app
        run: npm run build

      # Docker

      # Set up BuildKit Docker container builder to be able to build multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
      # Login to dockerhub
      - name: Docker login
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    if: github.event_name != 'pull_request'
    needs: build
    name: Deploy to VPS
    runs-on: alpine-latest
    steps:
      - name: Connect to VPS by SSH, pull latest image and run container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            cd
            docker login -u ${{ secrets.DOCKERHUB_LOGIN }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            docker pull "${{ env.IMAGE_NAME }}:latest"
            docker run -p 127.0.0.1:80:8080/tcp -d "${{ env.IMAGE_NAME }}"